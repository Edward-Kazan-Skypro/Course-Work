public class MassiveManager {

    //Данный класс добавлен от безысходности
    //Поясню. Было бы удобнее работать не с массивом (который жестко ограничен по размеру,
    //в котором не так легко найти место для записи - по условиям курсовой объекты класса Employee
    //удаляются из произвольного места, в том числе из середины списка), а со списком (я бы выбрал ArrayList).
    //Массив после удаления остается неизменным и надо как-то находить свободную ячейку для последующей записи.
    //Кроме того, если не делать проверку массива на наличие или отсутствие в каждой конкретной ячейке объекты класса Employee,
    //то при попытке доступа к ячейке постоянно появлялась ошибка NullPointerException.
    //Например, мы полностью заполнили массив, хранящийся в EmployeeBook.
    //Но, в дальнейшем удалили элемент с индексом 4 (получается 5-й элемент массива)
    //Получается:  элемент[3]     элемент[4]     элемент[5]
    //               есть             нет         есть
    //При попытке вывести на экран что либо (например ФИО сотрудников) в цикле обращаюсь к каждому следующему элементу
    //Данные по элемент[3] выводятся, а потом ошибка NullPointerException (мы же удалили элемент[4]),
    //но нам надо как то пропустить эту ячейку, чтобы дойти до конца массива.
    //Поэтому пришлось:
    //- добавить служебный класс MassiveManager,
    //- добавить массив int[] markers - в нем хранятся маркеры заполненности ячеек основного массива в Employee[] employees,
    //логика заполнения массива markers - если в мы успешно добавляем в основной массив новый объект Employee,
    //то 0 (которыми изначально инициализирован массив) заменяется на 1.
    //- в классе EmployeeBook вся логика проверки и поиска значений основана на сопоставлении данных из массива markers.


    //Инициализация массива markers.
    //Заполняем массив нулями, чтобы показать, что все ячейки в массиве класса EmployeeBook пусты.
    //В дальнейшем при работе программы, массив markers будет изменен:
    // - при успешном добавлении элемента (сведений о сотруднике) в массив класса EmployeeBook, значение
    //соответствующей ячейки массива markers будет равно 1.
    public static int[] markers = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

    public static int freeIndex = 0;

    //Метод возвращает число, которое в программе используется как индекс первого найденного нулевого значения
    //элементов массива markers
    public static int findFreeIndex() {
        freeIndex = 0;
        while (freeIndex < markers.length) {
            if (markers[freeIndex] == 0) {
                return freeIndex;
            }
            freeIndex++;
        }
        return freeIndex;
    }

}